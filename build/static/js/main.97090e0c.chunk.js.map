{"version":3,"sources":["index.js","giphy.gif"],"names":["App","detectFrame","video","model","detect","then","predictions","_this","renderPredictions","requestAnimationFrame","ctx","document","getElementById","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","_this2","this","webCamPromise","navigator","mediaDevices","getUserMedia","audio","facingMode","stream","srcObject","Promise","resolve","reject","onloadedmetadata","play","modelPromise","cocoSsd","all","values","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","id","React","Component","rootElement","ReactDOM","render","module","exports","__webpack_require__","p"],"mappings":"gOAOMA,gOA2BJC,YAAc,SAACC,EAAOC,GACpBA,EAAMC,OAAOF,GAAOG,KAAK,SAAAC,GACvBC,EAAKC,kBAAkBF,GACvBG,sBAAsB,WACpBF,EAAKN,YAAYC,EAAOC,UAK9BK,kBAAoB,SAAAF,GAClB,IACMI,EADIC,SAASC,eAAe,UACpBC,WAAW,MACzBH,EAAII,UAAU,EAAG,EAAGJ,EAAIK,OAAOC,MAAON,EAAIK,OAAOE,QAEjD,IAAMC,EAAO,kBACbR,EAAIQ,KAAOA,EACXR,EAAIS,aAAe,MACnBb,EAAYc,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GACpBP,EAAQK,EAAWE,KAAK,GACxBN,EAASI,EAAWE,KAAK,GAE/Bb,EAAIe,YAAc,UAClBf,EAAIgB,UAAY,EAChBhB,EAAIiB,WAAWL,EAAGE,EAAGR,EAAOC,GAE5BP,EAAIkB,UAAY,UAChB,IAAMC,EAAYnB,EAAIoB,YAAYT,EAAWU,OAAOf,MAC9CgB,EAAaC,SAASf,EAAM,IAClCR,EAAIwB,SAASZ,EAAGE,EAAGK,EAAY,EAAGG,EAAa,KAGjD1B,EAAYc,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GAE1Bb,EAAIkB,UAAY,UAChBlB,EAAIyB,SAASd,EAAWU,MAAOT,EAAGE,yFAhElB,IAAAY,EAAAC,KACZnC,EAAQS,SAASC,eAAe,SAChC0B,EAAgBC,UAAUC,aAC7BC,aAAa,CACZC,OAAO,EACPxC,MAAO,CACLyC,WAAY,OACZ3B,MAAO,KACPC,OAAO,OAGVZ,KAAK,SAAAuC,GAEJ,OADA1C,EAAM2C,UAAYD,EACX,IAAIE,QAAQ,SAACC,EAASC,GAC3B9C,EAAM+C,iBAAmB,WACvB/C,EAAMgD,OACNH,SAIFI,EAAeC,MACrBN,QAAQO,IAAI,CAACF,EAAcb,IAAgBjC,KAAK,SAAAiD,GAC9ClB,EAAKnC,YAAYC,EAAOoD,EAAO,uCA+CjC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACPH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,YACpBF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,aAEpBF,EAAAC,EAAAC,cAAA,SAAOE,GAAG,QAAQ3C,MAAM,OAAOC,OAAO,QACtCsC,EAAAC,EAAAC,cAAA,UAAQE,GAAG,SAAS3C,MAAM,OAAOC,OAAO,gBAlFpC2C,IAAMC,YAwFlBC,EAAcnD,SAASC,eAAe,QAC5CmD,IAASC,OAAOT,EAAAC,EAAAC,cAACzD,EAAD,MAAS8D,6HChGzBG,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.97090e0c.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport logo from './giphy.gif';\nimport \"./index.css\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    const video = document.getElementById(\"video\");\n    const webCamPromise = navigator.mediaDevices\n      .getUserMedia({\n        audio: false,\n        video: {\n          facingMode: \"user\",\n          width: 1200,\n          height:720 \n        }\n      })\n      .then(stream => {\n        video.srcObject = stream;\n        return new Promise((resolve, reject) => {\n          video.onloadedmetadata = () => {\n            video.play();\n            resolve();\n          };\n        });\n      });\n    const modelPromise = cocoSsd.load();\n    Promise.all([modelPromise, webCamPromise]).then(values => {\n      this.detectFrame(video, values[0]);\n    });\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  renderPredictions = predictions => {\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 20); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n              <div className=\"lds-roller\"><div>\n                </div><div>\n                  </div><div>\n                    </div><div>\n                      </div><div>\n                        </div><div>\n                          </div><div>\n                            </div><div>\n                              </div></div>\n              <video id=\"video\" width=\"1200\" height=\"720\" />\n              <canvas id=\"canvas\" width=\"1200\" height=\"720\" />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","module.exports = __webpack_public_path__ + \"static/media/giphy.b7c48bfb.gif\";"],"sourceRoot":""}